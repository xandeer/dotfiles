#+PROPERTY: header-args:elisp :tangle (concat temporary-file-directory "xandeer-core-custom.el")

Here includes all of the customizable variables and faces of my configuration.

You can custom it in @@html: <span>@@ ~custom/user-config.el~ @@html: </span>@@

* Header :noexport:
#+begin_src elisp
  ;;; xandeer-core-custom.el  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  Xandeer

  ;;; Commentary:

  ;; Xandeer's Emacs Configuration Core Custom.

  ;;; Code:
#+end_src

* Custom Config Hooks
#+begin_src elisp
  (defvar xandeer/config-before-hook nil
    "Hooks to run config functions before load custom.el.")

  (defvar xandeer/config-after-hook nil
    "Hooks to run config functions after.")

  (add-hook 'xandeer/config-after-hook
            #'(lambda () (message "Hi~ Hope you have fun with this config.")))
#+end_src

* Custom

#+begin_src elisp
  (defgroup xandeer nil
    "Xandeer Emacs Custom Configurations."
    :group 'emacs)

  (defcustom lisp-modes-hooks '(common-lisp-mode-hook
                                emacs-lisp-mode-hook
                                lisp-mode-hook
                                racket-mode-hook
                                scheme-mode-hook)
    "List of lisp-related modes hooks."
    :type '(repeat symbol)
    :group 'xandeer)

  (defcustom *clangd* (executable-find "clangd")
    "Clangd path.  If nil, will not use clangd."
    :group 'xandeer
    :type 'string)

  (defcustom *ccls* (executable-find "ccls")  ;; macOS
    "Ccls path.  If nil, will not use ccls."
    :group 'xandeer
    :type 'string)

  (defvar *eldoc-use* nil
    "Use eldoc-box, eldoc-overlay or not.

  nil means use default.

  box means use eldoc-box.

  overlay means use eldoc-overlay.")

  (defvar *flycheck-inline* t
    "Use flycheck-inline or not.")

  (defcustom *nix* nil
    "Nix path.  If nil, will not use nix."
    :group 'xandeer
    :type 'string)

  (defcustom *rust* (or (executable-find "rustc")
                        (executable-find "cargo")
                        (executable-find "rustup"))
    "The Rust path.  If nil, will not use Rust."
    :group 'xandeer
    :type 'string)

  (defcustom *rls* (executable-find "rls")
    "The rls path.  If nil, will not use rls."
    :group 'xandeer
    :type 'string)

  (defcustom *highlight-indent-guides* t
    "Whether to use highlight-indent-guides or not."
    :group 'xandeer
    :type 'boolean)

  (defcustom *debug* nil
    "Whether to use debug or not."
    :group 'xandeer
    :type 'boolean)

  (defcustom *server* nil
    "Whether to use server or not."
    :group 'xandeer
    :type 'boolean)

  (defcustom *c-box* t
    "Whether to use company box or not."
    :group 'xandeer
    :type 'boolean)

  (defcustom *ivy/helm/selectrum* 'selectrum
    "Use ivy, helm or selectrum?"
    :group 'xandeer
    :type '(choice (const :tag "Use ivy"       ivy)
                   (const :tag "Use helm"      helm)
                   (const :tag "Use selectrum" selectrum)))

  (defcustom *ivy-or-helm* 'ivy
    "Use ivy or helm?"
    :group 'xandeer
    :type '(choice (const :tag "Use ivy"  ivy)
                   (const :tag "Use helm" helm)))

  (defcustom *ivy-posframe* t
    "Whether to use ivy-posframe or not."
    :group 'xandeer
    :type 'boolean)

  (defcustom *ivy-fuzzy* t
    "Enables fuzzy completion for Ivy searches."
    :group 'xandeer
    :type  'boolean)

  (defcustom *ivy-prescient* t
    "Enables prescient filtering and sorting for Ivy searches."
    :group 'xandeer
    :type  'boolean)

  (defcustom *vterm* nil
    "Whether to use vterm or not."
    :group 'xandeer
    :type 'boolean)

  (defcustom *org-headline-rescale* t
    "Whether to rescale org-headline or not."
    :group 'xandeer
    :type 'boolean)

  (defcustom *ispell* (executable-find "aspell")
    "The Ispell.  If nil, will not use Ispell."
    :group 'xandeer
    :type 'string)

  (defcustom *theme* 'doom-dracula
    "The Theme."
    :group 'xandeer
    :type 'symbol)

  (defcustom *mouse-color* "black"
    "Mouse color."
    :group 'xandeer
    :type 'string)

  (defcustom *font* "Consola Mono"
   "The main font.  After change it, run `M-x xandeer/set-font' to see the effect."
   :group 'xandeer
   :type 'string)

  (defcustom *font-size* (if *is-a-mac* 16.0 30.0)
   "The main font.  After change it, run `M-x xandeer/set-font' to see the effect."
   :group 'xandeer
   :type 'float)

  (defcustom *font-weight* 'normal
   "The main font.  After change it, run `M-x xandeer/set-font' to see the effect."
   :group 'xandeer
   :type 'symbol)

  (defcustom *font-cjk* "TsangerJinKai05-6763 W05" ;"Xingkai SC"
   "The cjk font.  After change it, run `M-x xandeer/set-font' to see the effect."
   :group 'xandeer
   :type 'string)

  (defcustom *font-size-cjk* (if *is-a-mac* 18.0 36.0)
   "The cjk font.  After change it, run `M-x xandeer/set-font' to see the effect."
   :group 'xandeer
   :type 'float)

  (defcustom *font-weight-cjk* 'light
   "The cjk font.  After change it, run `M-x xandeer/set-font' to see the effect."
   :group 'xandeer
   :type 'symbol)

  (defcustom *lookup/offline* t
    "Install and prefer offline dictionary/thesaurus."
    :group 'xandeer
    :type 'boolean)

  (defvar xandeer/projectile-fd-binary
    (or (cl-find-if #'executable-find '("fdfind" "fd"))
        "fd")
    "name of `fd-find' executable binary")
#+end_src

* Default Settings
** Emacs
#+begin_src elisp
  (leaf xandeer-emacs-settings
    :init
    (leaf cus-edit
      :custom
      (custom-raised-buttons . t)))
#+end_src

** Company
#+begin_src elisp
  (setq-default company-idle-delay .5)
#+end_src

** Cursor
#+begin_src elisp
  (setq-default
    blink-cursor-interval .6
    blink-matching-paren  t
    cursor-in-non-selected-windows t)

  (blink-cursor-mode 1)

  (add-hook 'xandeer/config-after-hook
            #'(lambda ()
                (when (fboundp 'set-mouse-color)
                  (set-mouse-color *mouse-color*))))
#+end_src

** Parens
#+begin_src elisp
  (setq-default
   show-paren-style                                'parenthesis
   sp-autoinsert-quote-if-followed-by-closing-pair t
   sp-base-key-bindings                            'paredit
   sp-show-pair-from-inside                        t)
#+end_src

** Scrolling
#+begin_src elisp
  (setq hscroll-margin                  7
        scroll-margin                   7
        hscroll-step                    7
        scroll-step                     7
        scroll-conservatively           100000
        scroll-preserve-screen-position 'always
        mac-mouse-wheel-smooth-scroll    nil)
#+end_src

** Shell
#+begin_src elisp
  (setq-default shell-file-name "/bin/zsh")
#+end_src

** Start
#+begin_src elisp
  (setq-default
   ;; initial-scratch-message     (concat ";; Happy hacking, " user-login-name " - Emacs ♥ you!\n\n")
   initial-scratch-message     ""
   dashboard-banner-logo-title (concat ";; Happy hacking, " user-login-name " - Emacs ♥ you!\n\n")
   ;; initial-buffer-choice       #'(lambda () (get-buffer "*dashboard*"))  ;; It will cause error if you start emacs from Command line with file name
                                                                            ;; https://github.com/rakanalh/emacs-dashboard/issues/69
  )
#+end_src

** Visual
#+begin_src elisp
  (setq-default
   fill-column                    76
   visual-fill-column-width       80
   word-wrap                      t
   highlight-indent-guides-method 'column
   tab-width                      8
   tooltip-delay                  1.5)
#+end_src

** Indent
#+begin_src elisp
  (setq xandeer-indent 2)
  (setq-default standard-indent xandeer-indent)
  (setq pug-tab-width xandeer-indent)
  (setq css-indent-offset xandeer-indent)
  (setq js-indent-level xandeer-indent)
  (setq typescript-indent-level xandeer-indent)
  (setq-default sh-indentation xandeer-indent)
#+end_src

** Whitespace
#+begin_src elisp
  (setq-default
   whitespace-line-column 76
   whitespace-style       '(face spaces tabs newline
                            space-mark tab-mark newline-mark
                            lines-tail empty))
#+end_src

** Mess
#+begin_src elisp
  (setq-default
     bookmark-default-file (no-littering-expand-var-file-name ".bookmarks.el")
     buffers-menu-max-size 30
     case-fold-search      t
     column-number-mode    t
     dired-dwim-target     t
     ediff-split-window-function 'split-window-horizontally
     ediff-window-setup-function 'ediff-setup-windows-plain
     indent-tabs-mode      nil
     line-move-visual      t
     make-backup-files     nil
     mouse-yank-at-point   t
     require-final-newline t
     save-interprogram-paste-before-kill t
     set-mark-command-repeat-pop    t
     tab-always-indent              'complete
     truncate-lines                 nil
     truncate-partial-width-windows nil)

  (when *is-a-mac*
    (setq line-move-visual nil))

  (fset 'yes-or-no-p 'y-or-n-p)

  (global-auto-revert-mode t)

  (delete-selection-mode t)
#+end_src

** Config After initialization
#+begin_src elisp
  (defun xandeer/config-after ()
    "Set configuration need to be set after init."
    (setq-default
     debug-on-error *debug*))


  (add-hook 'xandeer/config-after-hook  #'xandeer/config-after)
#+end_src

* Footer :noexport:
#+begin_src elisp
  (provide 'xandeer-core-custom)
  ;;; xandeer-core-custom.el ends here
#+end_src
