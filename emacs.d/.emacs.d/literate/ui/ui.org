#+PROPERTY: header-args:elisp :tangle (concat temporary-file-directory "xandeer-ui.el")

* Header                                                              :noexport:

#+begin_src elisp
  ;;; xandeer-ui.el --- Xandeer's Emacs Configuration editor file.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  Xandeer

  ;;; Commentary:

  ;; Xandeer's Emacs Configuration UI.

  ;;; Code:
#+end_src

* Configs
** Dashboard

#+begin_src elisp
  (straight-use-package 'dashboard)
  (leaf dashboard
    :commands dashboard-setup-startup-hook
    :bind
    ("<f5>" . xandeer/dashboard-refresh)
    (:dashboard-mode-map
     ("g"              . xandeer/dashboard-refresh)
     ("<down-mouse-1>" . nil)
     ("<mouse-1>"      . widget-button-click)
     ("<mouse-2>"      . widget-button-click)
     ("<up>"           . widget-backward)
     ("<down>"         . (lambda () (interactive) (widget-forward 1))))
    :hook ((dashboard-mode-hook . (lambda () (gsetq-local tab-width 1)))
           (after-init-hook     . dashboard-setup-startup-hook))
    :custom
    (dashboard-org-agenda-categories . '("Calendar" "Tasks" "Appointments"))
    `(dashboard-startup-banner       . ,(concat user-emacs-directory "ue.png"))
    (dashboard-items . '((recents   . 10)
                         (bookmarks . 5)
                         ;; (registers . 5)
                         ;; (agenda    . 5)
                         (projects  . 10)))
    ((dashboard-center-content
      dashboard-show-shortcuts
      dashboard-set-heading-icons
      dashboard-set-file-icons
      dashboard-set-init-info
      show-week-agenda-p
      dashboard-set-navigator) . t)
    :init
    (after-x 'all-the-icons
      (setq dashboard-navigator-buttons
            `(;; line1
              ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
                "Source"
                "Source Page"
                (lambda (&rest _) (browse-url "https://github.com/xandeer/dotfiles/")))
               (,(all-the-icons-octicon "gear" :height 1.1 :v-adjust 0.0)
                "Config"
                "Config File"
                (lambda (&rest _) (let ((upath (expand-file-name "custom/user-config.el" user-emacs-directory)))
                                    (epath (expand-file-name "custom/user-config-example.el" user-emacs-directory)))
                  (when (and (file-exists-p epath)
                             (not (file-exists-p upath)))
                    (copy-file epath upath))
                  (find-file upath)))))))
    (defun xandeer/dashboard-refresh ()
      "Refresh dashboard buffer."
      (interactive)
      (unless (get-buffer dashboard-buffer-name)
        (generate-new-buffer "*dashboard*"))
      (dashboard-refresh-buffer))

    (defun xandeer/fw2 (&rest _)
      "Forward 2 chars."
      (interactive "p")
      (forward-char 2))
    :advice
    (:after dashboard-next-line     xandeer/fw2)
    (:after widget-forward          xandeer/fw2)
    (:after dashboard-previous-line xandeer/fw2)
    (:after widget-backward         xandeer/fw2))
#+end_src

** doom Theme
#+begin_src elisp
  (straight-use-package 'doom-themes)
  (leaf doom-themes
    :custom ((doom-dracula-brighter-comments
              doom-dracula-colorful-headers
              doom-dracula-comment-bg) . t)
    :config
    (after-x 'treemacs
      (doom-themes-treemacs-config)
      (gsetq doom-themes-treemacs-theme "doom-colors"))
    (doom-themes-visual-bell-config)
    (after-x 'org-mode
      (doom-themes-org-config)))
#+end_src

** Font
#+begin_src elisp
  (defun xandeer/set--font (frame)
    "Xandeer set font for `FRAME'."
    (when (display-graphic-p)
      (set-face-attribute
       'default nil
       :font (font-spec :name   *font*
                        :weight *font-weight*
                        :size   *font-size*))

      (dolist (charset '(kana han cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font)
                          charset
                          (font-spec :name   *font-cjk*
                                     :weight *font-weight-cjk*
                                     :size   *font-size-cjk*)
                          frame
                          'prepend))

      (if *is-a-mac*
           ;; For NS/Cocoa
          (set-fontset-font t
                             'symbol
                             (font-spec :family "Apple Color Emoji")
                             frame
                             'append)
         ;; For Linux
        (set-fontset-font t
                          'symbol
                          (font-spec :family "Symbola")
                          frame
                          'prepend))

      (set-face-attribute 'mode-line nil
                          :font (font-spec :name   *font*
                                           :weight 'normal
                                           :size   (if *is-a-mac* 15 25)))

      (set-face-attribute 'mode-line-inactive nil
                          :font (font-spec :name   *font*
                                           :weight 'normal
                                           :size   (if *is-a-mac* 15 25)))))

  (defun xandeer/set-font (&rest _)
    "Xandeer set font."
    (interactive)
    (xandeer/set--font nil))


  (add-hook #'after-init-hook #'xandeer/set-font)
  (add-hook #'after-make-frame-functions   #'xandeer/set-font)
  (add-hook #'server-after-make-frame-hook #'xandeer/set-font)
#+end_src

** Main Theme

#+begin_src elisp
  (defun xandeer/load-theme ()
    "Xandeer load theme function"
    (when *theme*
      (load-theme *theme* t)))

  (add-hook #'after-init-hook #'xandeer/load-theme)
#+end_src

** Mode Line
#+begin_src elisp
  (straight-use-package 'minions)
  (leaf minions
    :hook after-init-hook
    :custom (minions-mode-line-lighter . "âœ¬"))
#+end_src

#+begin_src elisp
  (straight-use-package 'doom-modeline)
  (leaf doom-modeline
    :hook after-init-hook
    :defun doom-modeline-def-segment
    :custom
    ((doom-modeline-height                      . 25)
     (doom-modeline-bar-width                   . 3)
     (doom-modeline-window-width-limit          . fill-column)
     (doom-modeline-project-detection           . 'project)
     (doom-modeline-buffer-file-name-style      . 'truncate-with-project)
     ((doom-modeline-icon
       doom-modeline-major-mode-icon
       doom-modeline-major-mode-color-icon
       doom-modeline-buffer-state-icon
       doom-modeline-buffer-modification-icon
       doom-modeline-unicode-fallback
       doom-modeline-minor-modes
       doom-modeline-enable-word-count)
      . t)
     (doom-modeline-continuous-word-count-modes . '(markdown-mode gfm-mode org-mode text-mode))
     (doom-modeline-buffer-encoding             . nil)
     (doom-modeline-indent-info                 . nil)
     (doom-modeline-checker-simple-format       . nil)
     (doom-modeline-number-limit                . 99)
     (doom-modeline-vcs-max-length              . 12)
     (doom-modeline-persp-name                  . nil)
     (doom-modeline-display-default-persp-name  . nil)
     (doom-modeline-lsp                         . t)
     (doom-modeline-github                      . t)
     `(doom-modeline-github-interval            . ,(* 30 60))
     (doom-modeline-modal-icon                  . t)))
#+end_src

** Nasy Theme
#+begin_src elisp
  (leaf nasy-theme)
#+end_src

* Footer                                                              :noexport:
#+begin_src elisp
  (provide 'xandeer-ui)
  ;;; xandeer-ui.el ends here
#+end_src
