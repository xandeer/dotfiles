* Xandeer
** TimeStamp (Disabled)
#+header: :tangle no
#+BEGIN_SRC elisp
(defun xandeer/nth-days-timestamp (n)
  "Return after n days's timestamp like: 2019-05-26 Sun"
  (format-time-string "%F %a"
                      (time-add (current-time) (* 24 3600 n))))

(defun xandeer/nth-days-inactive (n)
  (concat "[" (xandeer/nth-days-timestamp n) "]"))

(defun xandeer/today ()
  "Format time string like: 2020-04-20 Monday"
  (format-time-string "%F %A"))
#+END_SRC
** Custom Refile (Disabled)
Refile current headline to the first of its section.
#+header: :tangle no
#+BEGIN_SRC elisp
(defun xandeer/refile-to-first ()
  "Move the current org headline to the first of its section."

  (interactive)
  ;; check if we are at the top level

  (let ((lvl (org-current-level)))
    (cond
     ;; above all headlines so nothing to do
     ((not lvl)
      (message "No headline to move"))
     ((= lvl 1)
      ;; if at top level move current tree to go above first headline
      (org-cut-subtree)
      (beginning-of-buffer)
      ;; test if point is now at the frst headline and if not then move
      ;; to the first headline
      (unless (looking-at-p "*")
        (org-next-visible-heading 1))
      (org-paste-subtree))
     ((> lvl 1)
      ;; if not at top level then get position of headline level above
      ;; current section and refile to that position.
      (let* ((org-reverse-note-order t)
             (pos (save-excursion
                    (outline-up-heading 1)
                    (point)))
             (filename (buffer-file-name))
             (rfloc (list nil filename nil pos)))
        (org-refile nil nil rfloc))))))
#+END_SRC
** Diary Sunrise and Sunset
Copied from https://emacs-china.org/t/05-org-as/12092/4
#+BEGIN_SRC elisp
  ;;日出而作, 日落而息
(defun xandeer/diary-sunrise ()
  (let ((dss (diary-sunrise-sunset)))
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ",")
      (buffer-substring (point-min) (match-beginning 0)))))

(defun xandeer/diary-sunset ()
  (let ((dss (diary-sunrise-sunset))
        start end)
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ", ")
      (setq start (match-end 0))
      (search-forward " at")
      (setq end (match-beginning 0))
      (goto-char start)
      (capitalize-word 1)
      (buffer-substring start end))))
#+END_SRC
** Schedule (Disabled)
Generate a string for scheduling on tomorrow.
#+header: :tangle no
#+BEGIN_SRC elisp
(defun xandeer/schedule-tomorrow ()
  "Return scheduled string on tomorrow."
  (format-time-string "SCHEDULED: <%F %a>"
                      (time-add (current-time) (* 24 3600))))
#+END_SRC
** Archive (Disabled)
Define a function to archive tasks with special type.
#+header: :tangle no
#+BEGIN_SRC elisp
(defun xandeer/archive-tasks-of (type)
  "Archive tasks of the type."
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   (concat "/+{|" (upcase type) "}") 'tree))
#+END_SRC

Define an interactive function to archive tasks which are done or canceled.
#+header: :tangle no
#+BEGIN_SRC elisp
(defun xandeer/archive-done-or-canceled ()
  "Archive tasks which are done or canceled."
  (interactive)
  (xandeer/archive-tasks-of "DONE")
  (xandeer/archive-tasks-of "CANCELED"))
#+END_SRC

** Convert Chinese Quotations
#+BEGIN_SRC elisp
(defun xandeer/convert-chinese-quotations ()
  "Convert all [“|“] to [『|』] in current buffer."
  (interactive)

  (goto-char (point-min))
  (while (re-search-forward "“" nil t)
    (replace-match "「"))

  (goto-char (point-min))
  (while (re-search-forward "”" nil t)
    (replace-match "」")))
#+END_SRC
