* Org Roam
** Auto Toggle Roam Buffer
#+BEGIN_SRC elisp
(defun xandeer/is-journal-buffer ()
  (and (buffer-file-name) (s-contains? org-journal-dir (buffer-file-name))))
(defun xandeer/is-roam-buffer ()
  (and (buffer-file-name) (s-contains? (expand-file-name org-roam-directory) (buffer-file-name))))
(defun xandeer/auto-toggle-roam-buffer ()
  "Deactivate roam-buffer when switch to journal, activate it when switch to
roam except journal."
  (pcase (org-roam-buffer--visibility)
    ('visible (when (xandeer/is-journal-buffer)
                (org-roam-buffer-deactivate)))
    ((or 'exists 'none) (when (and (xandeer/is-roam-buffer) (not (xandeer/is-journal-buffer)))
                         (org-roam-buffer-activate)))))
#+END_SRC
** Basic
#+BEGIN_SRC elisp
(use-package org-roam
  :hook
  (after-init . org-roam-mode)
  :config
  (add-hook 'doom-switch-window-hook 'xandeer/auto-toggle-roam-buffer)
  (add-hook 'doom-switch-buffer-hook 'xandeer/auto-toggle-roam-buffer)
  :custom
  (org-roam-capture-templates
   '(("d" "default" plain #'org-roam-capture--get-point "%?"
      :file-name "%<%Y%m%d%H%M%S>-${slug}"
      :head "#+TITLE: ${title}\n#+CREATED: <%<%Y-%m-%d %a %R>>\n#+ROAM_TAGS: Inbox\n\n"
      :unnarrowed t)))
  (org-roam-dailies-capture-templates
   '(("d" "daily" plain (function org-roam-capture--get-point) ""
      :immediate-finish t
      :file-name "journal/%<%Y-%m-%d-%a>"
      :head ":PROPERTIES:\n:CATEGORY: Journal\n:END:\n#+TITLE: %<%Y-%m-%d, %A>\n#+STARTUP: content\n\n* %<%A, %x>"))))
#+END_SRC
** Tag
#+BEGIN_SRC elisp
; Copy from: https://gist.github.com/d12frosted/4a55f3d072a813159c1d7b31c21bac9a
(defun +org-notes-tags-read ()
  "Return list of tags as set in the buffer."
  (org-roam--extract-tags-prop (buffer-file-name (buffer-base-buffer))))

(defun xandeer/roam-delete-tag ()
  "Delete a tag from current note."
  (interactive)
  (unless (+org-notes-buffer-p)
    (user-error "Current buffer is not a note"))
  (let* ((tags (+org-notes-tags-read))
         (tag (completing-read "Tag: " tags nil 'require-match)))
    (+org-buffer-prop-set
     "ROAM_TAGS"
     (combine-and-quote-strings (delete tag tags)))
    (org-roam-db--update-tags)))

(defun xandeer/roam-add-tag ()
  "Add a tag to current note."
  (interactive)
  (unless (+org-notes-buffer-p)
    (user-error "Current buffer is not a note"))
  (let* ((tags (seq-uniq
                (+seq-flatten
                 (+seq-flatten
                  (org-roam-db-query [:select tags :from tags])))))
         (tag (completing-read "Tag: " tags)))
    (when (string-empty-p tag)
      (user-error "Tag can't be empty"))
    (+org-buffer-prop-set
     "ROAM_TAGS"
     (combine-and-quote-strings (seq-uniq (cons tag (+org-notes-tags-read)))))
    (org-roam-db--update-tags)))

(defun +org-notes-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (and buffer-file-name
       (string-equal (expand-file-name (file-name-as-directory org-roam-directory))
                     (file-name-directory buffer-file-name))))

(defun +seq-flatten (list-of-lists)
  "Flatten LIST-OF-LISTS."
  (apply #'append list-of-lists))

(defun +org-buffer-prop-set (name value)
  "Set a buffer property called NAME to VALUE."
  (save-excursion
    (widen)
    (goto-char (point-min))
    (if (re-search-forward (concat "^#\\+" name ": \\(.*\\)") (point-max) t)
        (replace-match (concat "#+" name ": " value))
      ;; find the first line that doesn't begin with ':' or '#'
      (let ((found))
        (while (not (or found (eobp)))
          (beginning-of-line)
          (if (or (looking-at "^#")
                  (looking-at "^:"))
              (line-move 1 t)
            (setq found t)))
        (insert "#+" name ": " value "\n")))))
#+END_SRC
