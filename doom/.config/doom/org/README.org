* Org

#+BEGIN_SRC elisp
(after! org
  (setq org-directory "~/projects/personal/notes/"
        org-id-locations-file (convert-standard-filename
                               (concat org-directory ".org-ids"))
        +org-export-directory "exports"
        org-reverse-note-order t
        org-default-notes-file (concat org-directory "pub/journal.org")))
#+END_SRC

** Refile

#+BEGIN_SRC elisp
(after! org
  (setq org-refile-targets `((nil :maxlevel . 5)
    (,(concat org-directory "pub/journal.org") :maxlevel . 5)
    (,(concat org-directory "pub/notes.org") :maxlevel . 5)
    (,(concat org-directory "pub/reading.org") :maxlevel . 5)
    ("someday.org" :maxlevel . 5)
    ("diary.org" :maxlevel . 5)
    ("learning.org" :maxlevel . 5)
    ("work.org" :maxlevel . 5)
    (org-agenda-files :maxlevel . 5))
  ))
#+END_SRC

Refile current headline to the first of its section.

#+BEGIN_SRC elisp
(defun xandeer/refile-to-first ()
  "Move the current org headline to the first of its section."

  (interactive)
  ;; check if we are at the top level

  (let ((lvl (org-current-level)))
    (cond
     ;; above all headlines so nothing to do
     ((not lvl)
      (message "No headline to move"))
     ((= lvl 1)
      ;; if at top level move current tree to go above first headline
      (org-cut-subtree)
      (beginning-of-buffer)
      ;; test if point is now at the frst headline and if not then move
      ;; to the first headline
      (unless (looking-at-p "*")
        (org-next-visible-heading 1))
      (org-paste-subtree))
     ((> lvl 1)
      ;; if not at top level then get position of headline level above
      ;; current section and refile to that position.
      (let* ((org-reverse-note-order t)
             (pos (save-excursion
                    (outline-up-heading 1)
                    (point)))
             (filename (buffer-file-name))
             (rfloc (list nil filename nil pos)))
        (org-refile nil nil rfloc))))))
#+END_SRC

* Agenda

#+BEGIN_SRC elisp
(after! org
  (setq org-archive-reversed-order t
        org-todo-keywords '((sequence "TODO(t)" "|" "DELEGATE(e)" "DONE(d)")
                            (sequence "|" "CANCELED(c@/!)"))
        org-agenda-files '("~/projects/personal/notes/gtd.org")
        org-agenda-span 'day
        org-agenda-start-day nil
        org-clock-clocked-in-display 'both
        org-agenda-time-grid '((daily today require-timed)
                               (900 1000 1100 1330 1430 1530 1630 1700)
                               "......"
                               "------------------------------------------------")
        org-agenda-start-on-weekday nil))
#+END_SRC

** Archive

Define a function to archive tasks with special type.

#+BEGIN_SRC elisp
(defun xandeer/archive-tasks-of (type)
  "Archive tasks of the type."
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   (concat "/+{|" (upcase type) "}") 'tree))
#+END_SRC

Define an interactive function to archive tasks which are done or canceled.

#+BEGIN_SRC elisp
(defun xandeer/archive-done-or-canceled ()
  "Archive tasks which are done or canceled."
  (interactive)
  (xandeer/archive-tasks-of "DONE")
  (xandeer/archive-tasks-of "CANCELED"))
#+END_SRC

* Schedule

Generate a string for scheduling on tomorrow.

#+BEGIN_SRC elisp
(defun xandeer/schedule-tomorrow ()
  "Return scheduled string on tomorrow."
  (format-time-string "SCHEDULED: <%F %a>"
                      (time-add (current-time) (* 24 3600))))
#+END_SRC

* Capture

#+BEGIN_SRC elisp
(after! org-capture
  (unless (boundp 'org-capture-templates)
    (defvar org-capture-templates nil))

  (add-to-list 'org-capture-templates
               '("u" "Web url bookmark" entry
                 (file+headline "bookmarks.org" "Cache")
                 "* #BM# %? \n%U" :prepend t))

  (add-to-list 'org-capture-templates
               '("c" "Cache" entry
                 (file+headline "" "Cache") ; "" => `org-default-notes-file'
                 "* %? %U" :prepend t))

  (add-to-list 'org-capture-templates
               '("i" "Ideas" entry
                 (file+olp "someday.org" "Ideas")
                 "* %? %U" :prepend t))

  (add-to-list 'org-capture-templates
               '("fh" "Film had watched" item
                 (file+olp "someday.org" "Films" "Watched")
                 "1. %? %^u" :prepend t))

  (add-to-list 'org-capture-templates
               '("f" "Film want to watch" item
                 (file+olp "someday.org" "Films" "Want to Watch")
                 "1. %? %U" :prepend t))

  (add-to-list 'org-capture-templates
               '("bh" "Book had read" item
                 (file+olp "someday.org" "Books" "Read")
                 "1. %? %^u" :prepend t))

  (add-to-list 'org-capture-templates
               '("b" "Book want to read" item
                 (file+olp "someday.org" "Books" "Want to Read")
                 "1. %? %U" :prepend t))

  (add-to-list 'org-capture-templates
               '("d" "Do It Tomorrow" entry
                 (file+headline "gtd.org" "Tasks")
                 "* TODO %?\n%(xandeer/schedule-tomorrow)\n%U\n" :clock-resume t))

  (add-to-list 'org-capture-templates
               '("t" "Tasks" entry
                 (file+headline "gtd.org" "Tasks")
                 "* TODO %?\n%U\n" :clock-resume t :prepend t))

  (add-to-list 'org-capture-templates
               '("w" "Work" entry
                 (file+olp+datetree "work.org" "Weekly Summaries")
                 (file ".work.tmpl.org") :prepend t))

  ;; (add-to-list 'org-capture-templates
  ;;              '("dr" "Daily review" entry
  ;;                (file+olp+datetree "diary.org" "Daily Review")
  ;;                (file ".daily.tmpl.org") :prepend t))

  ;; (add-to-list 'org-capture-templates
  ;;              '("wr" "Weekly review" entry
  ;;                (file+olp+datetree "diary.org" "Weekly Review")
  ;;                (file ".weekly.tmpl.org") :prepend t))

  (add-to-list 'org-capture-templates
               '("de" "Daily extracts" plain
                 (file+olp+datetree "pub/daily-extracts.org")
                 "%U\n%?\n" :prepend t)))
#+END_SRC

* Publish

#+include: "publish.org"
* Deft

** Define Package

#+header: :tangle (concat (file-name-directory (buffer-file-name)) "packages.el")
#+BEGIN_SRC elisp
(package! deft)
#+END_SRC

** Configuration

#+BEGIN_SRC elisp
(use-package! deft
  :config
  (setq deft-directory "~/projects/personal/notes"
        deft-extensions '("org")
        deft-default-extension "org"
        deft-text-mode 'org-mode
        deft-use-filename-as-title t
        deft-use-filter-string-for-filename t))
#+END_SRC
