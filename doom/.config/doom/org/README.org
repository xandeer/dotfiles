* Org
#+BEGIN_SRC elisp
(after! org
  (setq org-directory "~/projects/personal/notes/"
        org-id-locations-file (convert-standard-filename
                               (concat org-directory ".org-ids"))
        +org-export-directory "exports"
        org-reverse-note-order t
        org-default-notes-file (concat org-directory "pub/journal.org")))
#+END_SRC
** Refile

#+BEGIN_SRC elisp
(after! org
  (setq org-refile-targets `((nil :maxlevel . 5)
    (,(concat org-directory "pub/journal.org") :maxlevel . 5)
    (,(concat org-directory "pub/notes.org") :maxlevel . 5)
    (,(concat org-directory "pub/reading.org") :maxlevel . 5)
    (,(concat org-directory "pub/daily-extracts.org") :maxlevel . 5)
    ("someday.org" :maxlevel . 5)
    (org-agenda-files :maxlevel . 5))))
#+END_SRC

Refile current headline to the first of its section.

#+BEGIN_SRC elisp
(defun xandeer/refile-to-first ()
  "Move the current org headline to the first of its section."

  (interactive)
  ;; check if we are at the top level

  (let ((lvl (org-current-level)))
    (cond
     ;; above all headlines so nothing to do
     ((not lvl)
      (message "No headline to move"))
     ((= lvl 1)
      ;; if at top level move current tree to go above first headline
      (org-cut-subtree)
      (beginning-of-buffer)
      ;; test if point is now at the frst headline and if not then move
      ;; to the first headline
      (unless (looking-at-p "*")
        (org-next-visible-heading 1))
      (org-paste-subtree))
     ((> lvl 1)
      ;; if not at top level then get position of headline level above
      ;; current section and refile to that position.
      (let* ((org-reverse-note-order t)
             (pos (save-excursion
                    (outline-up-heading 1)
                    (point)))
             (filename (buffer-file-name))
             (rfloc (list nil filename nil pos)))
        (org-refile nil nil rfloc))))))
#+END_SRC

* Agenda
#+BEGIN_SRC elisp
(after! org
  (setq org-archive-reversed-order t)
  (setq org-todo-keywords '((sequence "TODO(t)" "|" "DELEGATE(e)" "DONE(d)")
                            (sequence "|" "CANCELED(c@/!)" "SHELVE(s)")))
  (setq org-agenda-span 'day)
  (setq org-agenda-start-day nil)
  (setq org-clock-clocked-in-display 'both)
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-time-grid '((daily today require-timed)
                               (600 900 1200 1500 1800 2100)
                               "......"
                               "-----------------------------------------"))
  (setq org-agenda-files `(,(concat org-directory "gtd.org")
                           ,(concat org-directory "today.org")
                           ,(concat org-directory "diary-by-months")
                           ,(concat org-directory "roam")
                           ,(concat org-directory "routine.org")))
  (setq org-agenda-file-regexp "\\`[^.].*[d]*\\.org\\'")
  ;; (setq org-agenda-file-regexp "\\`[^.].*\\'")
  ;; (setq org-journal-enable-agenda-integration t)
  (setq diary-file (concat org-directory "standard-diary"))
  (setq org-agenda-include-diary t)
  (setq calendar-chinese-celestial-stem
        ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
  (setq calendar-chinese-terrestrial-branch
        ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
  ;; Copied from https://emacs-china.org/t/05-org-as/12092/4
  ;; location
  (setq calendar-longitude 113.9442)
  (setq calendar-latitude 22.5395)
  ;;Sunrise and Sunset
  ;;日出而作, 日落而息
  (defun xandeer/diary-sunrise ()
    (let ((dss (diary-sunrise-sunset)))
      (with-temp-buffer
        (insert dss)
        (goto-char (point-min))
        (while (re-search-forward " ([^)]*)" nil t)
          (replace-match "" nil nil))
        (goto-char (point-min))
        (search-forward ",")
        (buffer-substring (point-min) (match-beginning 0)))))

  (defun xandeer/diary-sunset ()
    (let ((dss (diary-sunrise-sunset))
          start end)
      (with-temp-buffer
        (insert dss)
        (goto-char (point-min))
        (while (re-search-forward " ([^)]*)" nil t)
          (replace-match "" nil nil))
        (goto-char (point-min))
        (search-forward ", ")
        (setq start (match-end 0))
        (search-forward " at")
        (setq end (match-beginning 0))
        (goto-char start)
        (capitalize-word 1)
        (buffer-substring start end)))))
#+END_SRC

** Archive

Define a function to archive tasks with special type.

#+BEGIN_SRC elisp
(defun xandeer/archive-tasks-of (type)
  "Archive tasks of the type."
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   (concat "/+{|" (upcase type) "}") 'tree))
#+END_SRC

Define an interactive function to archive tasks which are done or canceled.

#+BEGIN_SRC elisp
(defun xandeer/archive-done-or-canceled ()
  "Archive tasks which are done or canceled."
  (interactive)
  (xandeer/archive-tasks-of "DONE")
  (xandeer/archive-tasks-of "CANCELED"))
#+END_SRC

* Schedule
Generate a string for scheduling on tomorrow.
#+BEGIN_SRC elisp
(defun xandeer/schedule-tomorrow ()
  "Return scheduled string on tomorrow."
  (format-time-string "SCHEDULED: <%F %a>"
                      (time-add (current-time) (* 24 3600))))
#+END_SRC

* Capture
#+BEGIN_SRC elisp
(after! org-capture
  (unless (boundp 'org-capture-templates)
    (defvar org-capture-templates nil))

  (setq org-capture-templates nil)

  (add-to-list 'org-capture-templates
               '("b" "Web url bookmark" entry
                 (file+headline "bookmarks.org" "Cache")
                 "* #BM# %? \n%U" :prepend t))

  (add-to-list 'org-capture-templates
               '("c" "Cache" entry
                 (file+headline "" "Cache") ; "" => `org-default-notes-file'
                 "* %? %U" :prepend t))

  (add-to-list 'org-capture-templates
               '("p" "Procedures" entry
                 (file+olp "today.org" "Today" "Procedures")
                 "* TODO %? :procedure:\n%T" :prepend t))

  (add-to-list 'org-capture-templates
               '("r" "Running" entry
                 (file+olp "today.org" "Today" "Events")
                 "* Running %? %^T :event:running:" :prepend t))

  (add-to-list 'org-capture-templates
               '("e" "Events" entry
                 (file+olp "today.org" "Today" "Events")
                 "* %? :event:\n%T" :prepend t :clock-in t :clock-keep t))

  (add-to-list 'org-capture-templates
               '("n" "Notes" entry
                 (file+olp "today.org" "Today" "Notes")
                 "* %? :note:\n%T" :prepend t :clock-in t :clock-keep t))

  (add-to-list 'org-capture-templates
               '("a" "Anki" entry
                 (file+olp "today.org" "Today" "Notes")
                 "* Anki :note:anki:\n:PROPERTIES:\n:ANKI_DECK: English\n:END:\n%T\n%?" :prepend t :clock-in t :clock-keep t :jump-to-captured t :immediate-finish t))

  (add-to-list 'org-capture-templates
               '("m" "Ticklers" entry
                 (file+olp "today.org" "Today" "Ticklers")
                 "* %? :tickler:\n%T" :prepend t :clock-in t :clock-keep t))

  (add-to-list 'org-capture-templates
               '("t" "Tasks" entry
                 (file+olp "today.org" "Today" "Tasks")
                 "* TODO %? :task:\n%T\n" :clock-resume t :prepend t))

  (add-to-list 'org-capture-templates
               '("g" "Get up" entry
                 (file+olp "today.org" "Today" "Events")
                 "* Get up %^T :event:getup:" :immediate-finish t))

  (add-to-list 'org-capture-templates
               '("w" "Work" entry
                 (file+olp+datetree "work.org" "Weekly Summaries")
                 (file ".work.tmpl.org") :prepend t))

  (add-to-list 'org-capture-templates
               '("d" "Daily extracts" plain
                 (file+olp+datetree "pub/daily-extracts.org")
                 "%U%?" :prepend t :immediate-finish t)))
#+END_SRC

* Publish
#+include: "publish.org"
* Deft
** Define Package
#+header: :tangle (concat (file-name-directory (buffer-file-name)) "packages.el")
#+BEGIN_SRC elisp
(package! deft)
#+END_SRC
** Configuration
#+BEGIN_SRC elisp
(use-package! deft
  :config
  (setq deft-directory "~/projects/personal/notes"
        deft-extensions '("org")
        deft-default-extension "org"
        deft-recursive t
        deft-text-mode 'org-mode
        deft-use-filename-as-title t
        deft-use-filter-string-for-filename t))
#+END_SRC
* Journal
#+BEGIN_SRC elisp
(after! org-journal
  (setq org-journal-dir (concat org-directory "roam"))
  (setq org-journal-file-header "#+title: %Y-%m-%d, %A\n#+startup: content\n\n")
  (setq org-journal-time-format "<%Y-%m-%d %R> ")
  (setq org-journal-file-format "%Y-%m-%d.org"))
#+END_SRC
