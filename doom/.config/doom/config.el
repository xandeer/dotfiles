;;; config.el -*- lexical-binding: t; -*-
;; Copyright (C) 2020 Xandeer

;; Author: Xandeer <kkxandeer@gmail.com>

;;; Commentary:

;; Xandeer's doom-emacs config file.

;; -------------------------------------------------------------------------
;; DO NOT EDIT THIS FILE DIRECTLY This is a file generated from a literate
;; programing source file located at doom-config.org
;;
;; You should make any changes there and regenerate it from Emacs org-mode
;; using C-c C-v t
;; -------------------------------------------------------------------------

;;; Code:

(setq-default lexical-binding t)

(add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescript-mode))
(add-to-list 'auto-mode-alist '("\\.zsh-theme\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("zshrc" . sh-mode))

(setq-default cursor-in-non-selected-windows 'hollow)

(setq-default fill-column 76)

(after! org
  (setq org-directory "~/projects/personal/notes/")
  (setq org-id-locations-file (convert-standard-filename (concat org-directory ".org-ids")))
  (setq org-default-notes-file (concat org-directory "pub/journal.org"))
  (setq +org-export-directory "exports")
  (setq diary-file (concat org-directory "standard-diary"))
  (setq org-roam-directory (concat org-directory "roam/"))
  (setq deft-directory org-roam-directory)
  (setq org-journal-dir (concat org-roam-directory "journal"))
  (setq org-agenda-files `(,(concat org-directory "gtd.org")
  			 ,(concat org-directory "today.org")
  			 ,(concat org-directory "diary-by-months")
  			 ,(concat org-journal-dir)
  			 ,(concat org-directory "routine.org"))))

(use-package! disable-mouse
  :config
  (global-disable-mouse-mode))

(defun evil-custom-end-of-buffer-dwim (&rest _)
  "If current line is empty, call `previous-line'."
  (when (looking-at-p "^$")
    (previous-line)))

(advice-add #'end-of-buffer :after #'evil-custom-end-of-buffer-dwim)

(use-package! projectile
  :defer
  :ensure
  :config
  (dolist (dir '("~/Downloads/" "~/projects/personal/dotfiles/" "~/.emacs.d/"))
    (when (file-directory-p dir)
      (add-to-list 'projectile-known-projects dir))))

(use-package! keyfreq
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))

(use-package! youdao-dictionary
  :defer
  :config
  (setq-default
   url-automatic-caching t
   youdao-dictionary-search-history-file (concat doom-cache-dir "youdao.cache")))

(map! :map pyim-mode-map
      "," #'pyim-page-previous-page
      "." #'pyim-page-next-page)

(map! :map ivy-minibuffer-map
  "M-i" #'pyim-convert-string-at-point)

(map! :leader
  :desc "Switch buffer"  "."    #'switch-to-buffer
  :desc "Select the treemacs window if it is visible"    "z"    #'treemacs-select-window
  :desc "Agenda List"    "a"    #'org-agenda-list
  :desc "Org capture"    "x"    #'org-capture
  :desc "Pop up scratch buffer"    "X" #'doom/open-scratch-buffer

  (:prefix-map ("n" . "notes")
    :desc "Org capture"                  "n" #'counsel-org-capture))

(map!
 :i "C-d" #'delete-char
 :i "C-f" #'forward-char
 :i "C-b" #'backward-char
 :i "C-k" #'kill-line
 :i "M-p" #'evil-complete-previous
 :i "M-n" #'evil-complete-next
 :i "C-p" #'evil-previous-line
 :i "C-n" #'evil-next-line)

(map! :map override
      ;; override for org mode
      :i "C-d" #'delete-char

      :gni "M-h" #'+workspace/switch-left
      :gni "M-l" #'+workspace/switch-right

      :i "C-y" #'yank
      :i "M-y" #'yank-pop
      :i "C-r" #'isearch-backward
      )

;; (general-evil-setup)
;; (general-imap "j"
  ;; (general-key-dispatch 'self-insert-command
    ;; :timeout 0.25
    ;; "w" (lambda () (interactive) (evil-normal-state) (save-buffer))
    ;; "s" (lambda () (interactive) (save-buffer))
    ;; "j" 'evil-normal-state))

(after! evil-easymotion
  (put 'visible-buffer 'bounds-of-thing-at-point (lambda () (cons (window-start) (window-end))))
  (evilem-make-motion evilem-motion-forward-word-begin #'evil-forward-word-begin :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-forward-WORD-begin #'evil-forward-WORD-begin :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-forward-word-end #'evil-forward-word-end :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-forward-WORD-end #'evil-forward-WORD-end :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-backward-word-begin #'evil-backward-word-begin :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-backward-word-end #'evil-backward-word-end :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-backward-WORD-end #'evil-backward-WORD-end :scope 'visible-buffer))

(map! :map org-mode-map
      :gni [M-return]   (λ! (+org/insert-item-below 1))
      :gni [s-return]   (λ! (+org/insert-item-below 1))
      :gni [M-S-return] (λ! (+org/insert-item-above 1))
      :gni [s-S-return] (λ! (+org/insert-item-above 1)))

(map! :map evil-org-mode-map
      :i "C-l" (general-predicate-dispatch 'recenter-top-bottom
  	       (org-at-table-p) 'org-table-next-field)
      :i "C-h" (general-predicate-dispatch 'help
  	       (org-at-table-p) 'org-table-previous-field)
      :i "C-k" (general-predicate-dispatch 'kill-line
  	       (org-at-table-p) '+org/table-previous-row)
      :i "C-j" (general-predicate-dispatch 'org-down-element
  	       (org-at-table-p) 'org-table-next-row)

      :ni "M-j" #'org-next-visible-heading
      :ni "M-k" #'org-previous-visible-heading)

(map! :map org-mode-map
      :localleader
      :desc "scheduled to tomorrow"
      "n" (λ! (org--deadline-or-schedule "" 'scheduled "+1d")))

(defun set-agenda-keys ()
  (evil-define-key 'motion evil-org-agenda-mode-map
    "j" 'org-agenda-next-item
    "k" 'org-agenda-previous-item
    "t" 'org-agenda-todo
    "i" 'org-agenda-clock-in
    "o" 'org-agenda-clock-goto
    "w" 'org-agenda-week-view
    "d" 'org-agenda-day-view
    "f" 'org-agenda-later
    "b" 'org-agenda-earlier
    "s" 'org-save-all-org-buffers
    "l" 'org-agenda-log-mode))

(advice-add #'evil-org-agenda-set-keys :after #'set-agenda-keys)

(after! ivy
  (map! :map ivy-minibuffer-map
      ;; "C-d" (λ! (insert (format-time-string "Daily %Y-%m-%d" (current-time))))
      ;; "C-w" (λ! (insert (format-time-string "Words %Y-%m-%d" (current-time))))
      "C-v" #'ivy-scroll-up-command))

(after! telega
  (map! :map override
      :gni "M-c" #'ivy-telega-chat-with))

(use-package! eww
  :defer t
  :config
  (map! :map eww-mode-map
      :n "f" #'link-hint-open-link
      :n "ya" #'link-hint-copy-link
      :n "yy" #'eww-copy-page-url
      :n "H" #'evil-window-top
      :n "L" #'evil-window-bottom
      :n "r" #'eww-reload
      :n "o" #'eww-browse-with-external-browser
      :n "J" #'eww-forward-url
      :n "K" #'eww-back-url))

(after! org
  (setq org-archive-reversed-order t)
  (setq org-reverse-note-order t))

(after! org
  (setq org-todo-keywords '((sequence "TODO(t)" "|" "DELEGATE(e)" "DONE(d)")
  			  (sequence "|" "CANCELED(c@/!)" "SHELVE(s)")))
  (setq org-agenda-span 'day)
  (setq org-agenda-start-day nil)
  (setq org-clock-clocked-in-display 'both)
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-time-grid '((daily today require-timed)
  			     (600 900 1200 1500 1800 2100)
  			     "......"
  			     "-----------------------------------------"))
  (setq org-agenda-include-diary t)
  (setq calendar-chinese-celestial-stem
      ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
  (setq calendar-chinese-terrestrial-branch
      ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
  ;; Copied from https://emacs-china.org/t/05-org-as/12092/4
  ;; location
  (setq calendar-longitude 113.9442)
  (setq calendar-latitude 22.5395))

(use-package! deft
  :ensure t
  :defer t
  :custom
  (deft-extensions '("org"))
  (deft-default-extension "org")
  (deft-recursive t)
  (deft-text-mode 'org-mode)
  (deft-use-filename-as-title t)
  (deft-use-filter-string-for-filename t)
  :bind (("C-c n d" . deft)))

(use-package org-journal
  :ensure t
  :defer t
  :custom
  (org-journal-file-header "#+title: %Y-%m-%d, %A\n#+startup: content\n\n")
  (org-journal-time-format "<%Y-%m-%d %R> ")
  (org-journal-file-format "%Y-%m-%d.org"))

(use-package org-roam
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-capture-templates
   '(("d" "default" plain #'org-roam-capture--get-point "%?"
      :file-name "%<%Y%m%d%H%M%S>-${slug}"
      :head "#+title: ${title}\n\n* Metadata\n** Created: [%<%Y-%m-%d %a %R>]\n* Main"
      :unnarrowed t)))
  (org-roam-dailies-capture-templates
   '(("d" "daily" plain (function org-roam-capture--get-point) ""
      :immediate-finish t
      :file-name "journal/%<%Y-%m-%d>"
      :head "#+title: %<%Y-%m-%d, %A>\n#+startup: content\n\n* %<%A, %x>")))
  :bind (:map org-roam-mode-map
       ("C-c n l" . org-roam)
       ("C-c n f" . org-roam-find-file)
       ("C-c n j" . org-roam-jump-to-index)
       ("C-c n b" . org-roam-switch-to-buffer)
       ("C-c n t" . org-roam-dailies-today)
       ("C-c n g" . org-roam-graph))
  :bind (:map org-mode-map
       ("C-c n i" . org-roam-insert)))

(defun xandeer/convert-chinese-quotations ()
  "Convert all [“|“] to [『|』] in current buffer."
  (interactive)

  (goto-char (point-min))
  (while (re-search-forward "“" nil t)
    (replace-match "「"))

  (goto-char (point-min))
  (while (re-search-forward "”" nil t)
    (replace-match "」")))

(use-package! pyim
  :bind
  (("M-i" . pyim-convert-string-at-point))
  :config
  ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
  ;; 我自己使用的中英文动态切换规则是：
  ;; 1. 光标只有在注释里面时，才可以输入中文。
  ;; 2. 光标前是汉字字符时，才能输入中文。
  ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
  (setq-default pyim-english-input-switch-functions
  	      '(pyim-probe-dynamic-english
  		pyim-probe-isearch-mode
  		pyim-probe-program-mode
  		pyim-probe-org-structure-template))

  (if (display-graphic-p)
      (setq pyim-page-tooltip 'posframe)
    (setq pyim-page-tooltip 'popup))

  (setq default-input-method "pyim"
      pyim-default-scheme 'xiaohe-shuangpin
      pyim-page-length 4
      pyim-fuzzy-pinyin-alist nil
      pyim-dcache-directory "~/.cache/pyim")
      ;; pyim-dicts
      ;; `((:name
  	 ;; "pyim-bigdict"
  	 ;; :file
  	 ;; ,(expand-file-name (concat doom-private-dir "etc/pyim/pyim-bigdict.pyim.gz")))))

  (setq pyim-punctuation-dict
      '(
  	; ("'" "‘" "’")
  	; ("\"" "“" "”")
  	("'" "「" "」")
  	("\"" "『" "』")
  	("_" "——")
  	("^" "…")
  	("]" "】")
  	("[" "【")
  	;; ("@" "◎")
  	("@" "@")
  	("?" "？")
  	(">" "》")
  	("=" "＝")
  	("<" "《")
  	(";" "；")
  	(":" "：")
  	("/" "、")
  	("\\" "、")
  	("." "。")
  	("-" "－")
  	("," "，")
  	("+" "＋")
  	("*" "×")
  	(")" "）")
  	("(" "（")
  	("&" "※")
  	("%" "％")
  	("$" "￥")
  	("#" "#")
  	("!" "！")
  	("`" "・")
  	("~" "～")
  	("}" "」")
  	("|" "÷")
  	("{" "「")))

  (use-package! pyim-greatdict
    :config (pyim-greatdict-enable))

  (add-hook 'emacs-startup-hook
  	#'(lambda () (pyim-restart-1 t))))

(use-package! cal-china-x
  :config
  (setq mark-holidays-in-calendar t)
  (setq cal-china-x-important-holidays cal-china-x-chinese-holidays)
  (setq cal-china-x-general-holidays '((holiday-lunar 1 15 "元宵节")))
  (setq calendar-holidays
      (append cal-china-x-important-holidays
  	      cal-china-x-general-holidays)))

(use-package! yasnippet
  :config
  (setq yas-snippet-dirs '("~/.config/doom/snippets"))
  (yas-global-mode 1))

(setq
 scroll-margin 0
 display-line-numbers-type 'visual)

(menu-bar-mode -1)
(tool-bar-mode -1)
; This is undefined on Android
(if (fboundp 'toggle-scroll-bar)
    (toggle-scroll-bar -1))

(use-package! nord-theme
  :config
  (load-theme 'nord t))

(defun xandeer/set-font (en cn en-size cn-size)
  (set-face-attribute 'default nil :font
  		    (format "%s:pixelsize=%d" en en-size))
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset
  		    (font-spec :family cn :size cn-size))))

(when (fboundp 'set-fontset-font)
  (if IS-MAC
      (xandeer/set-font "Consola Mono" "CloudKaiXingGBK" 16 18)
    (xandeer/set-font "Consola Mono" "CloudKaiXingGBK" 30 36)))
; fonts test
; 锐字云字库行楷体锐字云字库行楷体锐字云字库行楷体锐字云字库行楷体锐字云字库行楷
; HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

(defun xandeer/set-org-pretty-symbols ()
  (set-pretty-symbols! 'org-mode
    ;; original
    :name "#+NAME:"
    :src_block "#+BEGIN_SRC"
    :src_block_end "#+END_SRC"
    ;; customized
    :alist '(
  	   ("#+BEGIN_VERSE" . "☘")
  	   ("#+END_VERSE" . "☘")
  	   ("#+BEGIN_QUOTE" . "⚶")
  	   ("#+END_QUOTE" . "⚶")
  	   ("#+BEGIN_EXAMPLE" . "♒")
  	   ("#+END_EXAMPLE" . "♒")
  	   ("#+BEGIN_COMMENT" . "☕")
  	   ("#+END_COMMENT" . "☕")
  	   )
    :merge t))

;;;###autoload
(defun xandeer/init-popup-rules ()
  (set-popup-rules!
    '(("^\\*Org Agenda"    :size 0.4 :quit nil :select t :autosave t :modeline t :ttl nil))))

(after! org
  (xandeer/set-org-pretty-symbols)
  (xandeer/init-popup-rules))

(use-package! ivy-posframe
  :config
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center))
      ivy-posframe-parameters '((left-fringe . 8)
  				(right-fringe . 8)))
  (ivy-posframe-mode 1))

(use-package! telega
  :commands (telega)
  :defer t
  :hook (telega-chat-mode . doom-mark-buffer-as-real-h)
  :config
  (telega-mode-line-mode 1)
  (set-popup-rule! "^\\*Telega Root" :side 'left :size 50 :quit nil :select t)
  ;; (set-popup-rule! "^◀\\[.*\\]$" :side 'right :size 94 :quit nil :select t)
  ;; (set-popup-rule! "^◀\\(.*\\)$" :side 'right :size 94 :quit nil :select t)
  ;; (set-popup-rule! "^◀{.*}$" :side 'right :size 94 :quit nil :select t)
  ;; (set-popup-rule! "^◀<.*>$" :side 'right :size 94 :quit nil :select t)
  (setq
   telega-proxies
    (list
     '(:server "127.0.0.1" :port 8010 :enable t
  	     :type (:@type "proxyTypeHttp")))
   telega-sticker-set-download t
   telega-chat-button-width 28
   telega-cache-dir (expand-file-name "~/Downloads/telega")
   ; telega-use-tracking t
   ; telega-known-inline-bots '("@")
   telega-root-fill-column 48)
  (when (featurep! :completion ivy)
    (defun ivy-telega-chat-highlight (chat)
    (let ((unread (funcall (telega--tl-prop :unread_count) chat))
  	  (title (telega-chat-title chat 'with-identity))
  	  (not-muted-p (not (telega-chat-muted-p chat)))
  	  (mentions (funcall (telega--tl-prop :unread_mention_count) chat)))

      (if (and not-muted-p (> (+ unread mentions) 0))
  	  (ivy-append-face (format "%s %d@%d" title unread mentions) 'ivy-highlight-face)
      title)))

    (defun ivy-telega-chat-with ()
    "Starts chat with defined peer"
    (interactive)

    (telega t)
    (let ((chats (mapcar
  		  (lambda (x) (cons (ivy-telega-chat-highlight x) x))
  		  (telega-filter-chats 'all telega--ordered-chats))))
      (ivy-read "chat: " chats
  	      :action (lambda (x) (telega-chat--pop-to-buffer (cdr x)))
  	      :caller 'ivy-telega-chat-with)))

    (setq telega-completing-read-function 'ivy-completing-read))
  (when (featurep! :completion company)
    (add-hook 'telega-chat-mode-hook
  	    (lambda ()
  	      (set (make-local-variable 'company-backends)
  		   (append '(telega-company-emoji
  			     telega-company-username
  			     telega-company-hashtag)
  			   (when (telega-chat-bot-p telega-chatbuf--chat)
  			     '(telega-company-botcmd)))))))
  (when (featurep! :editor evil)
    (map!
     (:map telega-msg-button-map
       "k" nil
       "l" nil
       "e" nil
       "f" nil)))
  (when (eq window-system 'mac)
    ;; emacs-mac have some bug on user avatars
    (setq telega-user-use-avatars nil)))

(use-package! beancount
  :disabled t
  :config
    (add-to-list 'auto-mode-alist '("\\.beancount\\'" . beancount-mode)))

(use-package! eww
  :defer t
  :init
  (setq browse-url-browser-function
      '((".*google.*maps.*" . browse-url-generic)
  	("http.*\/\/github.com" . browse-url-generic)
  	("http.*\/\/gitlab.*" . browse-url-generic)
  	("stackoverflow.com" . browse-url-generic)
  	("youtube.com" . browse-url-generic)
  	("." . eww-browse-url)))
  (setq shr-external-browser 'browse-url-generic)
  (setq browse-url-generic-program
      (if IS-MAC
  	  (executable-find "open")
  	(executable-find "firefox")))
  (setq shr-width 80))

(use-package! mu4e
  :disabled t
  :config
  (setq mu4e-contexts
      (list
       (make-mu4e-context
  	:name "kkxandeer" ;;for kkxandeer-gmail
  	:enter-func (lambda () (mu4e-message "Entering context work"))
  	:leave-func (lambda () (mu4e-message "Leaving context work"))
  	:match-func (lambda (msg)
  		      (when msg
  			(mu4e-message-contact-field-matches
  			 msg '(:from :to :cc :bcc) "kkxandeer@gmail.com")))
  	:vars '((user-mail-address . "kkxandeer@gmail.com")
  		(user-full-name . "Kevin Du")
  		(mu4e-sent-folder . "/kkxandeer-gmail/[kkxandeer].Sent")
  		(mu4e-drafts-folder . "/kkxandeer-gmail/[kkxandeer].Drafts")
  		(mu4e-trash-folder . "/kkxandeer-gmail/[kkxandeer].Trash")
  		(mu4e-compose-signature . "Kevin\n")
  		(mu4e-compose-format-flowed . t)
  		(smtpmail-queue-dir . "~/.mail/kkxandeer-gmail/queue/cur")
  		(message-send-mail-function . smtpmail-send-it)
  		(smtpmail-smtp-user . "kkxandeer")
  		(smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
  		(smtpmail-default-smtp-server . "smtp.gmail.com")
  		(smtpmail-smtp-server . "smtp.gmail.com")
  		(smtpmail-smtp-service . 587)
  		(smtpmail-debug-info . t)
  		(smtpmail-debug-verbose . t)
  		(mu4e-maildir-shortcuts . (("/kkxandeer-gmail/INBOX" . ?i)
  					   ("/kkxandeer-gmail/[kkxandeer].Sent" . ?s)
  					   ("/kkxandeer-gmail/[kkxandeer].Trash" . ?t)
  					   ("/kkxandeer-gmail/[kkxandeer].All Mail" . ?a)
  					   ("/kkxandeer-gmail/[kkxandeer].Starred" . ?r)
  					   ("/kkxandeer-gmail/[kkxandeer].Drafts" . ?d)))))
       (make-mu4e-context
  	:name "dxandeer" ;;for dxandeer-gmail
  	:enter-func (lambda () (mu4e-message "Entering context work"))
  	:leave-func (lambda () (mu4e-message "Leaving context work"))
  	:match-func (lambda (msg)
  		      (when msg
  			(mu4e-message-contact-field-matches
  			 msg '(:from :to :cc :bcc) "dxandeer@gmail.com")))
  	:vars '((user-mail-address . "dxandeer@gmail.com")
  		(user-full-name . "Kevin Du")
  		(mu4e-sent-folder . "/dxandeer-gmail/[dxandeer].Sent")
  		(mu4e-drafts-folder . "/dxandeer-gmail/[dxandeer].Drafts")
  		(mu4e-trash-folder . "/dxandeer-gmail/[dxandeer].Trash")
  		(mu4e-compose-signature . "Kevin\n")
  		(mu4e-compose-format-flowed . t)
  		(smtpmail-queue-dir . "~/.mail/dxandeer-gmail/queue/cur")
  		(message-send-mail-function . smtpmail-send-it)
  		(smtpmail-smtp-user . "dxandeer")
  		(smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
  		(smtpmail-default-smtp-server . "smtp.gmail.com")
  		(smtpmail-smtp-server . "smtp.gmail.com")
  		(smtpmail-smtp-service . 587)
  		(smtpmail-debug-info . t)
  		(smtpmail-debug-verbose . t)
  		(mu4e-maildir-shortcuts . (("/dxandeer-gmail/INBOX" . ?i)
  					   ("/dxandeer-gmail/[dxandeer].Sent" . ?s)
  					   ("/dxandeer-gmail/[dxandeer].Trash" . ?t)
  					   ("/dxandeer-gmail/[dxandeer].All Mail" . ?a)
  					   ("/dxandeer-gmail/[dxandeer].Starred" . ?r)
  					   ("/dxandeer-gmail/[dxandeer].Drafts" . ?d))))))))

(use-package! anki-editor)

(use-package! plantuml
  :defer
  :custom
  (plantuml-default-exec-mode 'executable))

(setq pug-tab-width 2
      css-indent-offset 2
     js-indent-level 2)

(defun xandeer/nth-days-timestamp (n)
  "Return after n days's timestamp like: 2019-05-26 Sun"
  (format-time-string "%F %a"
  		    (time-add (current-time) (* 24 3600 n))))

(defun xandeer/nth-days-inactive (n)
  (concat "[" (xandeer/nth-days-timestamp n) "]"))

(defun xandeer/today ()
  "Format time string like: 2020-04-20 Monday"
  (format-time-string "%F %A"))

(defun xandeer/refile-to-first ()
  "Move the current org headline to the first of its section."

  (interactive)
  ;; check if we are at the top level

  (let ((lvl (org-current-level)))
    (cond
     ;; above all headlines so nothing to do
     ((not lvl)
      (message "No headline to move"))
     ((= lvl 1)
      ;; if at top level move current tree to go above first headline
      (org-cut-subtree)
      (beginning-of-buffer)
      ;; test if point is now at the frst headline and if not then move
      ;; to the first headline
      (unless (looking-at-p "*")
      (org-next-visible-heading 1))
      (org-paste-subtree))
     ((> lvl 1)
      ;; if not at top level then get position of headline level above
      ;; current section and refile to that position.
      (let* ((org-reverse-note-order t)
  	   (pos (save-excursion
  		  (outline-up-heading 1)
  		  (point)))
  	   (filename (buffer-file-name))
  	   (rfloc (list nil filename nil pos)))
      (org-refile nil nil rfloc))))))

;;日出而作, 日落而息
(defun xandeer/diary-sunrise ()
  (let ((dss (diary-sunrise-sunset)))
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
      (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ",")
      (buffer-substring (point-min) (match-beginning 0)))))

(defun xandeer/diary-sunset ()
  (let ((dss (diary-sunrise-sunset))
      start end)
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
      (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ", ")
      (setq start (match-end 0))
      (search-forward " at")
      (setq end (match-beginning 0))
      (goto-char start)
      (capitalize-word 1)
      (buffer-substring start end))))

(defun xandeer/schedule-tomorrow ()
  "Return scheduled string on tomorrow."
  (format-time-string "SCHEDULED: <%F %a>"
  		    (time-add (current-time) (* 24 3600))))

(defun xandeer/archive-tasks-of (type)
  "Archive tasks of the type."
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   (concat "/+{|" (upcase type) "}") 'tree))

(defun xandeer/archive-done-or-canceled ()
  "Archive tasks which are done or canceled."
  (interactive)
  (xandeer/archive-tasks-of "DONE")
  (xandeer/archive-tasks-of "CANCELED"))

;;; config.el ends here
