;;; config.el -*- lexical-binding: t; -*-
;; Copyright (C) 2020 Xandeer

;; Author: Xandeer <kkxandeer@gmail.com>

;;; Commentary:

;; Xandeer's doom-emacs config file.

;;----------------------------------------------------------------------------
;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; README.org
;;
;; You should make any changes there and regenerate it from Emacs org-mode
;; using C-c C-v t
;;----------------------------------------------------------------------------

;;; Code:

(setq-default lexical-binding t)

(add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescript-mode))
(add-to-list 'auto-mode-alist '("\\.zsh-theme\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("zshrc" . sh-mode))

(defun evil-custom-end-of-buffer-dwim (&rest _)
  "If current line is empty, call `previous-line'."
  (when (looking-at-p "^$")
    (previous-line)))

(advice-add #'end-of-buffer :after #'evil-custom-end-of-buffer-dwim)

(after! projectile
  (dolist (dir '("~/Downloads/" "~/projects/personal/dotfiles/" "~/.emacs.d/"))
    (when (file-directory-p dir)
      (add-to-list 'projectile-known-projects dir))))

(use-package! youdao-dictionary
  :config
  (setq-default
   url-automatic-caching t
   youdao-dictionary-search-history-file (concat doom-cache-dir "youdao.cache")))

(use-package! keyfreq
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))

(after! plantuml-mode
  (setq plantuml-default-exec-mode 'executable))

(defun xandeer/nth-days-timestamp (n)
  "Return after n days's timestamp like: 2019-05-26 Sun"
  (format-time-string "%F %a"
  		    (time-add (current-time) (* 24 3600 n))))

(defun xandeer/nth-days-inactive (n)
  (concat "[" (xandeer/nth-days-timestamp n) "]"))

(use-package! disable-mouse
  :config
  (global-disable-mouse-mode))

(setq-default cursor-in-non-selected-windows 'hollow)

(map! :map pyim-mode-map
      "," #'pyim-page-previous-page
      "." #'pyim-page-next-page)

(map! :map ivy-minibuffer-map
  "M-i" #'pyim-convert-string-at-point)

(map! :leader
  :desc "Switch buffer"  "."    #'switch-to-buffer
  :desc "Select the treemacs window if it is visible"    "z"    #'treemacs-select-window
  :desc "Agenda List"    "a"    #'org-agenda-list

  (:prefix-map ("n" . "notes")
    :desc "Org capture"                  "n" #'counsel-org-capture))

(map!
 :i "C-d" #'delete-char
 :i "C-f" #'forward-char
 :i "C-b" #'backward-char
 :i "C-k" #'kill-line
 :i "M-p" #'evil-complete-previous
 :i "M-n" #'evil-complete-next
 :i "C-p" #'evil-previous-line
 :i "C-n" #'evil-next-line)

(map! :map override
      ;; override for org mode
      :i "C-d" #'delete-char

      :gni "M-h" #'+workspace/switch-left
      :gni "M-l" #'+workspace/switch-right

      :i "C-y" #'yank
      :i "M-y" #'yank-pop
      :i "C-r" #'isearch-backward
      )

(general-evil-setup)
(general-imap "j"
  (general-key-dispatch 'self-insert-command
    :timeout 0.25
    "w" (lambda () (interactive) (evil-normal-state) (save-buffer))
    "s" (lambda () (interactive) (save-buffer))
    "j" 'evil-normal-state))

(map! :map org-mode-map
      :gni [M-return]   (λ! (+org/insert-item-below 1))
      :gni [s-return]   (λ! (+org/insert-item-below 1))
      :gni [M-S-return] (λ! (+org/insert-item-above 1))
      :gni [s-S-return] (λ! (+org/insert-item-above 1)))

(map! :map evil-org-mode-map
      :i "C-l" (general-predicate-dispatch 'recenter-top-bottom
  	       (org-at-table-p) 'org-table-next-field)
      :i "C-h" (general-predicate-dispatch 'help
  	       (org-at-table-p) 'org-table-previous-field)
      :i "C-k" (general-predicate-dispatch 'kill-line
  	       (org-at-table-p) '+org/table-previous-row)
      :i "C-j" (general-predicate-dispatch 'org-down-element
  	       (org-at-table-p) 'org-table-next-row)

      :ni "M-j" #'org-next-visible-heading
      :ni "M-k" #'org-previous-visible-heading)

(map! :map org-mode-map
      :localleader
      :desc "scheduled to tomorrow"
      "n" (λ! (org--deadline-or-schedule "" 'scheduled "+1d")))

(defun set-agenda-keys ()
  (evil-define-key 'motion evil-org-agenda-mode-map
    "j" 'org-agenda-next-item
    "k" 'org-agenda-previous-item
    "t" 'org-agenda-todo
    "i" 'org-agenda-clock-in
    "o" 'org-agenda-clock-goto
    "w" 'org-agenda-week-view
    "d" 'org-agenda-day-view
    "f" 'org-agenda-later
    "b" 'org-agenda-earlier
    "s" 'org-save-all-org-buffers
    "l" 'org-agenda-log-mode))

(advice-add #'evil-org-agenda-set-keys :after #'set-agenda-keys)

(after! ivy
  (map! :map ivy-minibuffer-map
      ;; "C-d" (λ! (insert (format-time-string "Daily %Y-%m-%d" (current-time))))
      ;; "C-w" (λ! (insert (format-time-string "Words %Y-%m-%d" (current-time))))
      "C-v" #'ivy-scroll-up-command))

(after! telega
  (map! :map override
      :gni "M-c" #'ivy-telega-chat-with))

(map! :map eww-mode-map
      :n "f" #'link-hint-open-link
      :n "ya" #'link-hint-copy-link
      :n "yy" #'eww-copy-page-url
      :n "H" #'evil-window-top
      :n "L" #'evil-window-bottom
      :n "r" #'eww-reload
      :n "o" #'eww-browse-with-external-browser
      :n "J" #'eww-forward-url
      :n "K" #'eww-back-url)

(after! org
  (setq org-directory "~/projects/personal/notes/"
      org-id-locations-file (convert-standard-filename
  			     (concat org-directory ".org-ids"))
      +org-export-directory "exports"
      org-reverse-note-order t
      org-default-notes-file (concat org-directory "pub/journal.org")))

(after! org
  (setq org-refile-targets `((nil :maxlevel . 5)
    (,(concat org-directory "pub/journal.org") :maxlevel . 5)
    (,(concat org-directory "pub/notes.org") :maxlevel . 5)
    (,(concat org-directory "pub/reading.org") :maxlevel . 5)
    ("someday.org" :maxlevel . 5)
    ("diary.org" :maxlevel . 5)
    ("learning.org" :maxlevel . 5)
    ("work.org" :maxlevel . 5)
    (org-agenda-files :maxlevel . 5))
  ))

(defun xandeer/refile-to-first ()
  "Move the current org headline to the first of its section."

  (interactive)
  ;; check if we are at the top level

  (let ((lvl (org-current-level)))
    (cond
     ;; above all headlines so nothing to do
     ((not lvl)
      (message "No headline to move"))
     ((= lvl 1)
      ;; if at top level move current tree to go above first headline
      (org-cut-subtree)
      (beginning-of-buffer)
      ;; test if point is now at the frst headline and if not then move
      ;; to the first headline
      (unless (looking-at-p "*")
      (org-next-visible-heading 1))
      (org-paste-subtree))
     ((> lvl 1)
      ;; if not at top level then get position of headline level above
      ;; current section and refile to that position.
      (let* ((org-reverse-note-order t)
  	   (pos (save-excursion
  		  (outline-up-heading 1)
  		  (point)))
  	   (filename (buffer-file-name))
  	   (rfloc (list nil filename nil pos)))
      (org-refile nil nil rfloc))))))

(after! org
  (setq org-archive-reversed-order t
      org-todo-keywords '((sequence "TODO(t)" "|" "DELEGATE(e)" "DONE(d)")
  			  (sequence "|" "CANCELED(c@/!)"))
      org-agenda-files '("~/projects/personal/notes/gtd.org")
      org-agenda-span 'day
      org-agenda-start-day nil
      org-clock-clocked-in-display 'both
      org-agenda-time-grid '((daily today require-timed)
  			     (900 1000 1100 1330 1430 1530 1630 1700)
  			     "......"
  			     "------------------------------------------------")
      org-agenda-start-on-weekday nil))

(defun xandeer/archive-tasks-of (type)
  "Archive tasks of the type."
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   (concat "/+{|" (upcase type) "}") 'tree))

(defun xandeer/archive-done-or-canceled ()
  "Archive tasks which are done or canceled."
  (interactive)
  (xandeer/archive-tasks-of "DONE")
  (xandeer/archive-tasks-of "CANCELED"))

(defun xandeer/schedule-tomorrow ()
  "Return scheduled string on tomorrow."
  (format-time-string "SCHEDULED: <%F %a>"
  		    (time-add (current-time) (* 24 3600))))

(after! org-capture
  (unless (boundp 'org-capture-templates)
    (defvar org-capture-templates nil))

  (add-to-list 'org-capture-templates
  	     '("c" "Cache" entry
  	       (file+headline "" "Cache") ; "" => `org-default-notes-file'
  	       "* %? %U" :prepend t))

  (add-to-list 'org-capture-templates
  	     '("i" "Ideas" entry
  	       (file+olp "someday.org" "Ideas")
  	       "* %? %U" :prepend t))

  (add-to-list 'org-capture-templates
  	     '("fh" "Film had watched" item
  	       (file+olp "someday.org" "Films" "Watched")
  	       "1. %? %^u" :prepend t))

  (add-to-list 'org-capture-templates
  	     '("f" "Film want to watch" item
  	       (file+olp "someday.org" "Films" "Want to Watch")
  	       "1. %? %U" :prepend t))

  (add-to-list 'org-capture-templates
  	     '("bh" "Book had read" item
  	       (file+olp "someday.org" "Books" "Read")
  	       "1. %? %^u" :prepend t))

  (add-to-list 'org-capture-templates
  	     '("b" "Book want to read" item
  	       (file+olp "someday.org" "Books" "Want to Read")
  	       "1. %? %U" :prepend t))

  (add-to-list 'org-capture-templates
  	     '("d" "Do It Tomorrow" entry
  	       (file+headline "gtd.org" "Tasks")
  	       "* TODO %?\n%(xandeer/schedule-tomorrow)\n%U\n" :clock-resume t))

  (add-to-list 'org-capture-templates
  	     '("t" "Tasks" entry
  	       (file+headline "gtd.org" "Tasks")
  	       "* TODO %?\n%U\n" :clock-resume t))

  (add-to-list 'org-capture-templates
  	     '("w" "Work" entry
  	       (file+olp+datetree "work.org" "Weekly Summaries")
  	       (file ".work.tmpl.org") :prepend t))

  ;; (add-to-list 'org-capture-templates
  ;;              '("dr" "Daily review" entry
  ;;                (file+olp+datetree "diary.org" "Daily Review")
  ;;                (file ".daily.tmpl.org") :prepend t))

  ;; (add-to-list 'org-capture-templates
  ;;              '("wr" "Weekly review" entry
  ;;                (file+olp+datetree "diary.org" "Weekly Review")
  ;;                (file ".weekly.tmpl.org") :prepend t))

  (add-to-list 'org-capture-templates
  	     '("de" "Daily extracts" plain
  	       (file+olp+datetree "pub/daily-extracts.org")
  	       "%U\n%?\n" :prepend t)))

(defun xandeer/fix-chinese-newline-in-html ()
  "Join consecutive Chinese lines into a single long line without unwanted space
 when exporting org-mode to html."
  (defadvice org-html-paragraph
      (before fsh-org-html-paragraph-advice (paragraph contents info) activate)
    (let ((fixed-contents)
  	(orig-contents (ad-get-arg 1))
  	(reg-han "[[:multibyte:]]"))
      (setq fixed-contents (replace-regexp-in-string
  			  (concat "\\(" reg-han "\\) *\n *\\(" reg-han "\\)")
  			  "\\1\\2" orig-contents))
      (ad-set-arg 1 fixed-contents))))

(defun xandeer/set-publish-alist ()
  "Set org publish alist."
  (setq pub-base-dir "~/projects/personal/notes/pub/"
      pub-export-dir "~/projects/personal/xandeer.github.io/"
      website-html-head
      "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/lib/htmlize.css\"/>
<link rel=\"stylesheet\" type=\"text/css\" href=\"css/lib/readtheorg.css\"/>
<link rel=\"stylesheet\" type=\"text/css\" href=\"css/note.css\"/>
<link rel=\"stylesheet\" type=\"text/css\"
href=\"https://fonts.googleapis.com/css?family=Marck+Script|Pacifico\"/>
<link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">"
      website-html-preamble
      "<script>
if (window.location.pathname.endsWith('index.html') || window.location.pathname === '/') {
     document.body.classList.add('home');
}
</script>
<div class=\"nav\"><ul>
<li><a href=\"index.html\">Home</a></li>
<li><a href=\"https://github.com/xandeer\">GitHub</a></li>
</ul></div>"
      website-html-postamble
      "<div class=\"footer\">Copyright 2019 %a.<br>Last updated %C.<br>
Built with %c.</div>
      <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>
      <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\"></script>
      <script type=\"text/javascript\" src=\"js/lib/jquery.stickytableheaders.min.js\"></script>
      <script type=\"text/javascript\" src=\"js/note.js\"></script>
      <script type=\"text/javascript\" src=\"js/lib/readtheorg.js\"></script>")
  (setq org-publish-project-alist
      `(
  	("org-notes"
  	 :base-extension "org"
  	 :base-directory ,pub-base-dir
  	 :publishing-directory ,pub-export-dir
  	 :publishing-function org-html-publish-to-html
  	 :recursive t
  	 :author "Kevin"
  	 :email "kkxandeer@gmail.com"
  	 :section-numbers nil
  	 :headline-levels 5
  	 :html-doctype "html5"
  	 :html-html5-fancy t
  	 ;; :html-head  ,website-html-head
  	 :html-head-extra ,website-html-head
  	 :auto-preamble t
  	 :html-preamble ,website-html-preamble
  	 :html-postamble ,website-html-postamble
  	 :auto-sitemap t
  	 :sitemap-filename "index.org"
  	 :sitemap-title "Xandeer's Home")
  	 ("org-static"
  	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|ico"
  	 :base-directory ,pub-base-dir
  	 :publishing-directory ,pub-export-dir
  	 :recursive t
  	 :publishing-function org-publish-attachment
  	 )
  	 ("org" :components ("org-notes" "org-static")))))

(after! org
  (xandeer/fix-chinese-newline-in-html)
  (xandeer/set-publish-alist))

(defun xandeer/convert-chinese-quotations ()
  "Convert all [“|“] to [『|』] in current buffer."
  (interactive)

  (goto-char (point-min))
  (while (re-search-forward "“" nil t)
    (replace-match "「"))

  (goto-char (point-min))
  (while (re-search-forward "”" nil t)
    (replace-match "」")))

(use-package! pyim
  :bind
  (("M-i" . pyim-convert-string-at-point))
  :config
  ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
  ;; 我自己使用的中英文动态切换规则是：
  ;; 1. 光标只有在注释里面时，才可以输入中文。
  ;; 2. 光标前是汉字字符时，才能输入中文。
  ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
  (setq-default pyim-english-input-switch-functions
  	      '(pyim-probe-dynamic-english
  		pyim-probe-isearch-mode
  		pyim-probe-program-mode
  		pyim-probe-org-structure-template))

  (if (display-graphic-p)
      (setq pyim-page-tooltip 'posframe)
    (setq pyim-page-tooltip 'popup))

  (setq default-input-method "pyim"
      pyim-default-scheme 'xiaohe-shuangpin
      pyim-page-length 4
      pyim-fuzzy-pinyin-alist nil
      pyim-dcache-directory "~/.cache/pyim")
      ;; pyim-dicts
      ;; `((:name
  	 ;; "pyim-bigdict"
  	 ;; :file
  	 ;; ,(expand-file-name (concat doom-private-dir "etc/pyim/pyim-bigdict.pyim.gz")))))

  (setq pyim-punctuation-dict
      '(
  	; ("'" "‘" "’")
  	; ("\"" "“" "”")
  	("'" "「" "」")
  	("\"" "『" "』")
  	("_" "——")
  	("^" "…")
  	("]" "】")
  	("[" "【")
  	;; ("@" "◎")
  	("@" "@")
  	("?" "？")
  	(">" "》")
  	("=" "＝")
  	("<" "《")
  	(";" "；")
  	(":" "：")
  	("/" "、")
  	("\\" "、")
  	("." "。")
  	("-" "－")
  	("," "，")
  	("+" "＋")
  	("*" "×")
  	(")" "）")
  	("(" "（")
  	("&" "※")
  	("%" "％")
  	("$" "￥")
  	("#" "#")
  	("!" "！")
  	("`" "・")
  	("~" "～")
  	("}" "」")
  	("|" "÷")
  	("{" "「")))

  (use-package! pyim-greatdict
    :config (pyim-greatdict-enable))

  (add-hook 'emacs-startup-hook
  	#'(lambda () (pyim-restart-1 t))))

(use-package! yasnippet
  :config
  (setq yas-snippet-dirs '("~/.config/doom/snippets"))
  (yas-global-mode 1))

(setq
 scroll-margin 0
 display-line-numbers-type 'visual)

(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

(use-package! nord-theme
  :config
  (load-theme 'nord t))

(defun xandeer/set-font (en cn en-size cn-size)
  (set-face-attribute 'default nil :font
  		    (format "%s:pixelsize=%d" en en-size))
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset
  		    (font-spec :family cn :size cn-size))))

(if IS-MAC
    (xandeer/set-font "Consola Mono" "CloudKaiXingGBK" 16 18)
  (xandeer/set-font "Consola Mono" "CloudKaiXingGBK" 30 36))
; fonts test
; 锐字云字库行楷体锐字云字库行楷体锐字云字库行楷体锐字云字库行楷体锐字云字库行楷
; HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

(defun xandeer/set-org-pretty-symbols ()
  (set-pretty-symbols! 'org-mode
    ;; original
    :name "#+NAME:"
    :src_block "#+BEGIN_SRC"
    :src_block_end "#+END_SRC"
    ;; customized
    :alist '(
  	   ("#+BEGIN_VERSE" . "☘")
  	   ("#+END_VERSE" . "☘")
  	   ("#+BEGIN_QUOTE" . "⚶")
  	   ("#+END_QUOTE" . "⚶")
  	   ("#+BEGIN_EXAMPLE" . "♒")
  	   ("#+END_EXAMPLE" . "♒")
  	   ("#+BEGIN_COMMENT" . "☕")
  	   ("#+END_COMMENT" . "☕")
  	   )
    :merge t))

;;;###autoload
(defun xandeer/init-popup-rules ()
  (set-popup-rules!
    '(("^\\*Org Agenda"    :size 0.4 :quit nil :select t :autosave t :modeline t :ttl nil))))

(after! org
  (xandeer/set-org-pretty-symbols)
  (xandeer/init-popup-rules))

(use-package! ivy-posframe
  :config
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center))
      ivy-posframe-parameters '((left-fringe . 8)
  				(right-fringe . 8)))
  (ivy-posframe-mode 1))

(use-package! telega
  :commands (telega)
  :defer t
  :hook (telega-chat-mode . doom-mark-buffer-as-real-h)
  :config
  (telega-mode-line-mode 1)
  (set-popup-rule! "^\\*Telega Root" :side 'left :size 50 :quit nil :select t)
  ;; (set-popup-rule! "^◀\\[.*\\]$" :side 'right :size 94 :quit nil :select t)
  ;; (set-popup-rule! "^◀\\(.*\\)$" :side 'right :size 94 :quit nil :select t)
  ;; (set-popup-rule! "^◀{.*}$" :side 'right :size 94 :quit nil :select t)
  ;; (set-popup-rule! "^◀<.*>$" :side 'right :size 94 :quit nil :select t)
  (setq
   telega-proxies
    (list
     '(:server "127.0.0.1" :port 8010 :enable t
  	     :type (:@type "proxyTypeHttp" :http_only t)))
   telega-sticker-set-download t
   telega-chat-button-width 28
   telega-cache-dir (expand-file-name "~/Downloads/telega")
   ; telega-use-tracking t
   ; telega-known-inline-bots '("@")
   telega-root-fill-column 48)
  (when (featurep! :completion ivy)
    (defun ivy-telega-chat-highlight (chat)
    (let ((unread (funcall (telega--tl-prop :unread_count) chat))
  	  (title (telega-chat-title chat 'with-identity))
  	  (not-muted-p (not (telega-chat-muted-p chat)))
  	  (mentions (funcall (telega--tl-prop :unread_mention_count) chat)))

      (if (and not-muted-p (> (+ unread mentions) 0))
  	  (ivy-append-face (format "%s %d@%d" title unread mentions) 'ivy-highlight-face)
      title)))

    (defun ivy-telega-chat-with ()
    "Starts chat with defined peer"
    (interactive)

    (telega t)
    (let ((chats (mapcar
  		  (lambda (x) (cons (ivy-telega-chat-highlight x) x))
  		  (telega-filter-chats 'all telega--ordered-chats))))
      (ivy-read "chat: " chats
  	      :action (lambda (x) (telega-chat--pop-to-buffer (cdr x)))
  	      :caller 'ivy-telega-chat-with)))

    (setq telega-completing-read-function 'ivy-completing-read))
  (when (featurep! :completion company)
    (add-hook 'telega-chat-mode-hook
  	    (lambda ()
  	      (set (make-local-variable 'company-backends)
  		   (append '(telega-company-emoji
  			     telega-company-username
  			     telega-company-hashtag)
  			   (when (telega-chat-bot-p telega-chatbuf--chat)
  			     '(telega-company-botcmd)))))))
  (when (featurep! :editor evil)
    (map!
     (:map telega-msg-button-map
       "k" nil
       "l" nil
       "e" nil
       "f" nil)))
  (when (eq window-system 'mac)
    ;; emacs-mac have some bug on user avatars
    (setq telega-user-use-avatars nil)))

(use-package! beancount
  :disabled t
  :config
    (add-to-list 'auto-mode-alist '("\\.beancount\\'" . beancount-mode)))

(use-package! eww
  :defer t
  :init
  (setq browse-url-browser-function
      '((".*google.*maps.*" . browse-url-generic)
  	("http.*\/\/github.com" . browse-url-generic)
  	("http.*\/\/gitlab.*" . browse-url-generic)
  	("stackoverflow.com" . browse-url-generic)
  	("youtube.com" . browse-url-generic)
  	("." . eww-browse-url)))
  (setq shr-external-browser 'browse-url-generic)
  (setq browse-url-generic-program
      (if IS-MAC
  	  (executable-find "open")
  	(executable-find "firefox")))
  (setq shr-width 80))

;;; config.el ends here
