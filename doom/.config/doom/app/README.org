* Telega

** Package

#+header: :tangle (concat (file-name-directory (buffer-file-name)) "packages.el")
#+BEGIN_SRC elisp
(package! telega
  :recipe
  (:host github
   :repo "zevlg/telega.el"
   :branch "telega-tdlib-150"
   :files (:defaults "README.md" "etc" "server" "Makefile" "test.el")))
#+END_SRC

** Configuration

#+BEGIN_SRC elisp
(use-package! telega
  :commands (telega)
  :defer t
  :hook (telega-chat-mode . doom-mark-buffer-as-real-h)
  :config
  (telega-mode-line-mode 1)
  (set-popup-rule! "^\\*Telega Root" :side 'left :size 50 :quit nil :select t)
  ;; (set-popup-rule! "^◀\\[.*\\]$" :side 'right :size 94 :quit nil :select t)
  ;; (set-popup-rule! "^◀\\(.*\\)$" :side 'right :size 94 :quit nil :select t)
  ;; (set-popup-rule! "^◀{.*}$" :side 'right :size 94 :quit nil :select t)
  ;; (set-popup-rule! "^◀<.*>$" :side 'right :size 94 :quit nil :select t)
  (setq
   telega-proxies
    (list
     '(:server "127.0.0.1" :port 8010 :enable t
               :type (:@type "proxyTypeHttp" :http_only t)))
   telega-sticker-set-download t
   telega-chat-button-width 28
   telega-cache-dir (expand-file-name "~/Downloads/telega")
   ; telega-use-tracking t
   ; telega-known-inline-bots '("@")
   telega-root-fill-column 48)
  (when (featurep! :completion ivy)
    (defun ivy-telega-chat-highlight (chat)
    (let ((unread (funcall (telega--tl-prop :unread_count) chat))
            (title (telega-chat-title chat 'with-identity))
            (not-muted-p (not (telega-chat-muted-p chat)))
            (mentions (funcall (telega--tl-prop :unread_mention_count) chat)))

        (if (and not-muted-p (> (+ unread mentions) 0))
            (ivy-append-face (format "%s %d@%d" title unread mentions) 'ivy-highlight-face)
        title)))

    (defun ivy-telega-chat-with ()
    "Starts chat with defined peer"
    (interactive)

    (telega t)
    (let ((chats (mapcar
                    (lambda (x) (cons (ivy-telega-chat-highlight x) x))
                    (telega-filter-chats 'all telega--ordered-chats))))
        (ivy-read "chat: " chats
                :action (lambda (x) (telega-chat--pop-to-buffer (cdr x)))
                :caller 'ivy-telega-chat-with)))

    (setq telega-completing-read-function 'ivy-completing-read))
  (when (featurep! :completion company)
    (add-hook 'telega-chat-mode-hook
              (lambda ()
                (set (make-local-variable 'company-backends)
                     (append '(telega-company-emoji
                               telega-company-username
                               telega-company-hashtag)
                             (when (telega-chat-bot-p telega-chatbuf--chat)
                               '(telega-company-botcmd)))))))
  (when (featurep! :editor evil)
    (map!
     (:map telega-msg-button-map
       "k" nil
       "l" nil
       "e" nil
       "f" nil)))
  (when (eq window-system 'mac)
    ;; emacs-mac have some bug on user avatars
    (setq telega-user-use-avatars nil)))
#+END_SRC

* Beancount (Disabled)

** Package

#+header: :tangle (concat (file-name-directory (buffer-file-name)) "packages.el")
#+BEGIN_SRC elisp
(package! beancount
  :disable t
  :recipe
  (:host github :repo "beancount/beancount"
         :files ("editors/emacs/beancount.el")))
#+END_SRC

** Configuration

#+BEGIN_SRC elisp
(use-package! beancount
  :disabled t
  :config
    (add-to-list 'auto-mode-alist '("\\.beancount\\'" . beancount-mode)))
#+END_SRC

* Eww

#+BEGIN_SRC elisp
(use-package! eww
  :defer t
  :init
  (setq browse-url-browser-function
        '((".*google.*maps.*" . browse-url-generic)
          ("http.*\/\/github.com" . browse-url-generic)
          ("http.*\/\/gitlab.*" . browse-url-generic)
          ("stackoverflow.com" . browse-url-generic)
          ("youtube.com" . browse-url-generic)
          ("." . eww-browse-url)))
  (setq shr-external-browser 'browse-url-generic)
  (setq browse-url-generic-program
        (if IS-MAC
            (executable-find "open")
          (executable-find "firefox")))
  (setq shr-width 80))
#+END_SRC

* Email

#+BEGIN_SRC elisp
(use-package! mu4e
  :disabled t
  :config
  (setq mu4e-contexts
        (list
         (make-mu4e-context
          :name "kkxandeer" ;;for kkxandeer-gmail
          :enter-func (lambda () (mu4e-message "Entering context work"))
          :leave-func (lambda () (mu4e-message "Leaving context work"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "kkxandeer@gmail.com")))
          :vars '((user-mail-address . "kkxandeer@gmail.com")
                  (user-full-name . "Kevin Du")
                  (mu4e-sent-folder . "/kkxandeer-gmail/[kkxandeer].Sent")
                  (mu4e-drafts-folder . "/kkxandeer-gmail/[kkxandeer].Drafts")
                  (mu4e-trash-folder . "/kkxandeer-gmail/[kkxandeer].Trash")
                  (mu4e-compose-signature . "Kevin\n")
                  (mu4e-compose-format-flowed . t)
                  (smtpmail-queue-dir . "~/.mail/kkxandeer-gmail/queue/cur")
                  (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-smtp-user . "kkxandeer")
                  (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                  (smtpmail-default-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-debug-info . t)
                  (smtpmail-debug-verbose . t)
                  (mu4e-maildir-shortcuts . (("/kkxandeer-gmail/INBOX" . ?i)
                                             ("/kkxandeer-gmail/[kkxandeer].Sent" . ?s)
                                             ("/kkxandeer-gmail/[kkxandeer].Trash" . ?t)
                                             ("/kkxandeer-gmail/[kkxandeer].All Mail" . ?a)
                                             ("/kkxandeer-gmail/[kkxandeer].Starred" . ?r)
                                             ("/kkxandeer-gmail/[kkxandeer].Drafts" . ?d)))))
         (make-mu4e-context
          :name "dxandeer" ;;for dxandeer-gmail
          :enter-func (lambda () (mu4e-message "Entering context work"))
          :leave-func (lambda () (mu4e-message "Leaving context work"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "dxandeer@gmail.com")))
          :vars '((user-mail-address . "dxandeer@gmail.com")
                  (user-full-name . "Kevin Du")
                  (mu4e-sent-folder . "/dxandeer-gmail/[dxandeer].Sent")
                  (mu4e-drafts-folder . "/dxandeer-gmail/[dxandeer].Drafts")
                  (mu4e-trash-folder . "/dxandeer-gmail/[dxandeer].Trash")
                  (mu4e-compose-signature . "Kevin\n")
                  (mu4e-compose-format-flowed . t)
                  (smtpmail-queue-dir . "~/.mail/dxandeer-gmail/queue/cur")
                  (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-smtp-user . "dxandeer")
                  (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                  (smtpmail-default-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-debug-info . t)
                  (smtpmail-debug-verbose . t)
                  (mu4e-maildir-shortcuts . (("/dxandeer-gmail/INBOX" . ?i)
                                             ("/dxandeer-gmail/[dxandeer].Sent" . ?s)
                                             ("/dxandeer-gmail/[dxandeer].Trash" . ?t)
                                             ("/dxandeer-gmail/[dxandeer].All Mail" . ?a)
                                             ("/dxandeer-gmail/[dxandeer].Starred" . ?r)
                                             ("/dxandeer-gmail/[dxandeer].Drafts" . ?d))))))))
#+END_SRC
